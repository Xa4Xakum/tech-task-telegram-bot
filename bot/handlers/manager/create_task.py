import asyncio
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from loguru import logger

from config.init import conf
from utils.misc import extract_media_info
from database.init import db

from ...keyboards import kb
from ...filters import ChatType, Role
from ...states import CreateTaskStates
from ...misc import send_tech_task, parse_datetime
from ...init import q

r = Router()
r.message.filter(
    ChatType('private'),
    Role(conf.roles.manager)
)


@r.message(F.text == kb.btn.manager.create_task.text)
async def start_create_task(msg: Message, state: FSMContext):
    await msg.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:", reply_markup=kb.cancel)
    await state.set_state(CreateTaskStates.waiting_for_text)


# üßæ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
@r.message(CreateTaskStates.waiting_for_text)
async def get_task_text(msg: Message, state: FSMContext):
    await state.update_data(text=msg.text, media=[])
    await msg.answer(
        "üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ, –¥–æ–∫—É–º–µ–Ω—Ç—ã). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.\n"
        '–í–ê–ñ–ù–û! –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤–ª–æ–∂–µ–Ω–∏–µ –¥–≤–∞–∂–¥—ã - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–æ–ø–∏—è',
        reply_markup=kb.ready
    )
    await state.set_state(CreateTaskStates.waiting_for_media)


# üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞
@r.message(F.content_type.in_(["photo", "video", "voice", "document"]), CreateTaskStates.waiting_for_media)
async def get_media(msg: Message, state: FSMContext):
    data = await state.get_data()
    media = data.get("media", [])
    media.append(msg)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç Message, —Ç—ã –ø–æ—Ç–æ–º —Å–∞–º –≤—ã—Ç–∞—â–∏—à—å file_id –∏ —Ç–∏–ø
    await state.update_data(media=media)


# ‚úÖ –ø—Ä–æ–ø—É—Å–∫ –º–µ–¥–∏–∞
@r.message(
    F.text == kb.btn.skip.text,
    CreateTaskStates.waiting_for_media
)
async def skip_media(msg: Message, state: FSMContext):
    await msg.answer(
        "üïí –£–∫–∞–∂–∏ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n"
        f'–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∞—Ç—ã: {datetime.now().strftime("%d.%m.%Y %H:%M")}'
    )
    await state.set_state(CreateTaskStates.waiting_for_deadline)


# ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–µ–¥–∏–∞
@r.message(
    F.text == kb.btn.ready.text,
    CreateTaskStates.waiting_for_media
)
async def done_media(msg: Message, state: FSMContext):
    data = await state.get_data()
    media = data.get("media", [])
    if len(media) == 0:
        await msg.answer(
            '–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è',
            reply_markup=kb.ready
        )
        return
    await skip_media(msg, state)


# üïí –î–µ–¥–ª–∞–π–Ω
@r.message(CreateTaskStates.waiting_for_deadline)
async def get_deadline(msg: Message, state: FSMContext):
    date = parse_datetime(msg.text, "%d.%m.%Y %H:%M")
    if not date:
        await msg.answer(
            f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑ {msg.text}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. '
            f'–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∞—Ç—ã: {datetime.now().strftime("%d.%m.%Y %H:%M")}'
        )
        return
    # –¢—É—Ç –º–æ–∂–µ—à—å —Å–∞–º –ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å
    await state.update_data(deadline=date)

    data = await state.get_data()
    text = data["text"]

    await msg.answer(
        f"üìå –ü—Ä–æ–≤–µ—Ä—å:\n\n"
        f"<b>–¢–µ–∫—Å—Ç:</b>\n{text}\n\n"
        f"<b>–ú–µ–¥–∏–∞:</b> {len(data.get('media', []))} —Ñ–∞–π–ª–∞(–æ–≤)\n"
        f"<b>–û—Ü–µ–Ω–∏—Ç—å –¥–æ:</b> {date}",
        parse_mode="HTML",
        reply_markup=kb.check
    )
    await state.set_state(CreateTaskStates.confirm)


# ‚òëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@r.message(F.text == kb.btn.all_good.text, CreateTaskStates.confirm)
async def confirm_task(msg: Message, state: FSMContext):
    data = await state.get_data()
    text = data["text"]
    deadline = data["deadline"]
    owner_id = msg.from_user.id
    media: list[Message] = data.get("media", [])

    task = db.tech_task.add(
        text=text,
        owner_id=owner_id,
        deadline=deadline,
        status=conf.task_statuses.open
    )
    added = []
    for i in media:
        for j in extract_media_info(i):
            logger.debug(j)
            if j not in added:
                db.media.add(
                    task_id=task.id,
                    file_id=j["file_id"],
                    media_type=j["media_type"],
                )
                added.append(j)

    await msg.answer(
        f"‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ #{task.id} —Å–æ–∑–¥–∞–Ω–æ!",
        reply_markup=kb.to_menu
    )
    await state.clear()
    q.put(mail_task(task.id))


async def mail_task(task_id: int):
    users = db.user.get_all_with_role(conf.roles.constructor)
    for user in users:
        await send_tech_task(
            user.id,
            task_id,
            kb.constructor.answer(task_id)
        )
        await asyncio.sleep(2)
